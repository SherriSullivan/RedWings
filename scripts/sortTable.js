/* specific to RW_Standings table since points are buried in the meter element in the second column and are numeric *//* improve someday by making a generic sort function and passing in correct variables, or other solution *///window.addEventListener('load', function() {sortTable('pointsTable', 'desc', 1);}, false);function sortTable(table, dir, n) {  var rows, switching, i, x, y, shouldSwitch, switchcount = 0;  table = document.getElementById(table);  switching = true;  //Set the sorting direction to ascending:  if (!dir) {dir = "asc"};   /*Make a loop that will continue until  no switching has been done:*/  while (switching) {    //start by saying: no switching is done:    switching = false;    rows = table.getElementsByTagName("tr");    /*Loop through all table rows (except the    first, which contains table headers):*/    for (i = 1; i < (rows.length - 1); i++) {      //start by saying there should be no switching:      shouldSwitch = false;      /*Get the two elements you want to compare,      one from current row and one from the next:*/      /*points are in the meter element*/	  if (n == 1) {   	  	x = parseInt(rows[i].getElementsByTagName("td")[n].firstChild.innerHTML);      	y = parseInt(rows[i + 1].getElementsByTagName("td")[n].firstChild.innerHTML);      /*teams are in the td*/	  } else {		  x = rows[i].getElementsByTagName("td")[n].innerHTML;		  y = rows[i+1].getElementsByTagName("td")[n].innerHTML;	  }      /*check if the two rows should switch place,      based on the direction, asc or desc:*/      if (dir == "asc") {        if (x >  y) {          //if so, mark as a switch and break the loop:          shouldSwitch= true;          break;        }      } else if (dir == "desc") {        if (x < y) {          //if so, mark as a switch and break the loop:          shouldSwitch= true;          break;        }      }    }    if (shouldSwitch) {      /*If a switch has been marked, make the switch      and mark that a switch has been done:*/      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);      switching = true;      //Each time a switch is done, increase this count by 1:      switchcount ++;     } else {      /*If no switching has been done AND the direction is "asc",      set the direction to "desc" and run the while loop again.*/      if (switchcount == 0 && dir == "asc") {        dir = "desc";        switching = true;      }    }  }}function setMeter() {	var is_chrome = navigator.userAgent.indexOf('Chrome') > -1;    var is_explorer = navigator.userAgent.indexOf('MSIE') > -1;    var is_firefox = navigator.userAgent.indexOf('Firefox') > -1;    var is_safari = navigator.userAgent.indexOf("Safari") > -1;    var is_opera = navigator.userAgent.toLowerCase().indexOf("op") > -1;    if ((is_chrome)&&(is_safari)) {is_safari=false;}    if ((is_chrome)&&(is_opera)) {is_chrome=false;}    if ( (is_safari)&&(!is_chrome) ) {		for (var i=0; i<31; i++) {			document.getElementsByTagName('meter')[i].setAttribute('class', 'safari');		}	}}